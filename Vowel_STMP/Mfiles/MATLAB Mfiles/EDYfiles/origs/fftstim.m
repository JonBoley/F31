function [varargout] = fftstim(varargin);% FFTSTIM - script to read and return or display  and FFT intsound output files% (PC sound files).%    [stim,srate,nsamp] = fftstim(str)% Optional inputs and outputs:%     str = 'filename as string' e.g. 'b14.int' or 'POKST1.STM'. If not provided%			this is requested.%     [stim,srate,nsamp] = stim samples, sampling rate (kHz), number of samples% If str is provided, program works silently (no displays, no FFT). If str is%     'D', program uses dialog box to get file, still works silently.% If str is not provided, goes into manual mode, displays signal, gives user the% option of displaying signal, fft, or spectrogram.% Get the file nameisquit = 0;if nargin==0	fname = input('Gimme the file name (b14.int, POKST1.STM, etc. <CR> for dialog): ','s');	if isempty(fname)		[fname,pname] = uigetfile('','Select the stimulus file:');		if fname==0			isquit = 1;		else			fname = strcat(pname,fname);		end	end	isloud = 1;elseif char(varargin(1)) == 'D'	[fname,pname] = uigetfile('','Select the stimulus file:');	isloud = 0;	if fname==0		isquit = 1;	else		fname = strcat(pname,fname);	endelse	fname = char(varargin{1});	isloud = 0;endif isquit; return; end% Read the data filefid = fopen(fname, 'r', 'ieee-le');[header, chead] = fread(fid, 2, 'int32');if chead~=2; fprintf('*** ERROR, header read as %g numbers.\n', chead); endsrate = header(1)/1000.; npts = header(2); [stimulus, count]=fread(fid, npts, 'int16');if fclose(fid)~=0; fprintf('*** Problem closing the file.***\n'); end% Return file if requestedif nargout>=1	varargout(1) = {stimulus};endif nargout>=2	varargout(2) = {srate};endif nargout>=3	varargout(3) = {npts};end% Do the displays if in manual modeif isloud==1	fprintf('Sampling rate = %i kHz, number of words = %i=%i.\n', ...	    srate, npts, count)	if npts~=count;		fprintf('*** NOTE: number of data points read appears to be wrong!***\n')	end	timeabs = [0:1/srate:(count-1)/srate]';	plot(timeabs, stimulus)	xlabel('milliseconds'); ylabel('stimulus');	titname = fname(max([0,find(fname==':')])+1:length(fname));	title(strcat('Stimulus from file ',titname,'.'));		iwh = input('Magnitude of FFT or Spectrogram or Quit? ','s');		if iwh=='M' | iwh=='m' | iwh=='F' | iwh=='f'		% Pad with zeros to make power of two stimulus:		nptsp2 = 2^ceil(log(npts)/log(2));		stimul = zeros(nptsp2,1); stimul(1:npts) = stimulus(1:npts);		ftstimul = fft(hamming(nptsp2).*stimul);		magftstimul = 20*log10(abs(ftstimul(1:nptsp2/2)));		freqft = [0:srate/nptsp2:srate/2-srate/nptsp2]';				plot(freqft, magftstimul)		xlabel('kilohertz'); ylabel('|FFT(stimulus)|, dB re 1')		title(strcat('Stimulus from file ',titname,'.'));		elseif iwh=='S' | iwh=='s'		nfft = input( ...		    sprintf('Freq. resol. = %g kHz/(FFT length). FFT length =? ',srate));		[spstim, freqsp, timsp] = specgram(stimulus, nfft, srate, nfft, nfft/2);		imagesc(timsp, freqsp, 20*log10(max(abs(spstim),ones(size(spstim)))));		axis xy; colormap(jet)		colorbar		xlabel('milliseconds'); ylabel('kilohertz')		title(strcat('Stimulus from file ',titname,'.'));		iwhnx = 'x'; scalo=0; scahi=0;		while iwhnx~='q' & iwhnx~='Q'		   iwhnx = input('Spectrogram, seCtion, Rescale, Quit: ','s');		   if iwhnx=='S' | iwhnx=='s'		      if scalo==0 & scahi==0		         imagesc(timsp, freqsp, 20*log10(max(abs(spstim),ones(size(spstim)))));			  else				  imagesc(timsp, freqsp, 20*log10(max(abs(spstim),ones(size(spstim)))),[scalo,scahi]);			  end		      axis xy; colormap(jet); colorbar		   elseif iwhnx=='C' | iwhnx=='c'			  thtime = -1;			  while thtime<timsp(1) | thtime>timsp(size(timsp,1))		         thtime = input('Enter time: ');		  	  end			  indx = size(find(timsp<=thtime),1);			  plot(freqsp, 20*log10(abs(spstim(:,indx))))			  title(sprintf('Section at time = %g ms.',timsp(indx)))		   elseif iwhnx=='R' | iwhnx=='r'			  scalo = input('low end of the scale = ');			  scahi = input('hi end of the scale = ');		   end	    end	endendreturn