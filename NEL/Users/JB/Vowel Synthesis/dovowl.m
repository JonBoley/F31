function [vtim, vowlv] = dovowl(forms, bws, pitch, dur, srate)% DOVOWL - synthesize a vowel with formants and bandwidths specified in% forms and bws. These are in Hz. pitch is the voice pitch, in Hz. dur is% the output duration in s, srate is the sampling rate (Hz).%      [times, vowelwaveform] = dovowl(formats, bandwidths, pitch, dur, srate)% Uses the number% of second order resonators% for whihch formants are given. Must be the same number of formants as% bandwidths. Adds a first-order lowpass with a cutoff of 100 Hz to model% the -12 dB/oct glottal waveform and the +6 dB/oct radiation impedance.% Cutoff frequency of the first-order lowpass (radians^-1)A = 1/(2*pi*20);nf = length(forms);if length(bws)~=nf | nf<1	fprintf('*** Number of formants and bandwidths must be equal.***\n')	vtim = []; vowlv = [];else% Generate input pulse train	ns = 2*(floor((round(srate*dur) + 1)/2)); np = round(srate/pitch);% 	fprintf('Actual voice pitch is %g Hz.\n', srate/np)	intrain = zeros(ns,1);	intrain([1:np:ns]) = 1;% Compute resonators and multiply by input train:	fftsig = fft(intrain);	lowfreq = 0; freqint = 2*pi*srate/ns; hifreq = 2*pi*srate/2;	for jf=nf:-1:1		[thfr, thfilter] = secondorder(2*pi*forms(jf), 2*pi*bws(jf), ...		                     lowfreq, hifreq, freqint);		thfilter = [thfilter; conj(flipud(thfilter(2:length(thfilter)-1)))];		fftsig = fftsig.*thfilter;	end% Add the first-order lowpass	[thfr, thfilter] = firstorder(A, lowfreq, hifreq, freqint);	thfilter = [thfilter; conj(flipud(thfilter(2:length(thfilter)-1)))];	fftsig = fftsig.*thfilter;% Inverse transform final signal and check	dura = 2*pi/thfr(2) - 1/srate;	vtim = [0:1/srate:dura]'; vowlv = ifft(fftsig);	A=std(real(vowlv)); B=std(imag(vowlv)); vowlv = real(vowlv);% 	fprintf('Result is real to the extent R/I = %g/%g.\n', A, B)end